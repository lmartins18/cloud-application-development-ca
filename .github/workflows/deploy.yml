# KEEP IN MIND WHEN REUSING THIS FILE
# IF YOU DO NOT ADD USER TO DOCKER GROUP
# THEY WILL NEED SUDO TO EXECUTE DOCKER COMMANDS!
name: CD/CI

on:
  push:
    branches: [main]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  BUILD_NUMBER: ${{ github.run_number }}

jobs:
  Security:
    name: Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all history so multiple commits can be scanned
      - name: GitGuardian scan
        uses: GitGuardian/ggshield/actions/secret@v1.25.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  RubyTests:
    name: Ruby Tests
    needs: Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3.0"

      - name: Install dependencies
        working-directory: ./backend
        run: bundle install

      - name: Run tests
        working-directory: ./backend
        run: ruby -Itest test/all.rb

  Build:
    name: Build
    needs: RubyTests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Docker login
        run: echo "${DOCKER_TOKEN}" | docker login -u ${DOCKER_USERNAME} --password-stdin

      - name: Docker build
        run: docker compose build

      - name: Docker push
        run: docker compose push

  Deploy:
    name: Deploy
    needs: Build
    runs-on: ubuntu-latest
    env:
      SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure EC2 SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${SSH_KEY}" > ~/.ssh/deploy.key
          chmod 600 ~/.ssh/deploy.key
          cat >>~/.ssh/config <<END
          Host deploy
            HostName ${SSH_HOST}
            User ${SSH_USER}
            IdentityFile ~/.ssh/deploy.key
            StrictHostKeyChecking no
          END

      - name: Ensure docker is installed
        run: ssh deploy 'bash -s' < ./aws/scripts/install_docker.sh

      - name: Copy docker compose file
        run: scp -i ~/.ssh/deploy.key docker-compose.yml ${SSH_USER}@${SSH_HOST}:~/.

      - name: Pull Docker image
        run: ssh deploy "docker compose pull"

      - name: Delete existing containers
        run: |
          ssh deploy "docker stop ca-react_app-1 || true && docker rm ca-react_app-1 || true" 
          ssh deploy "docker stop ca-rails_app-1 || true && docker rm ca-rails_app-1 || true" 
          ssh deploy "docker stop ca-html_client-1 || true && docker rm ca-html_client-1 || true"

      - name: Spin up compose
        run: ssh deploy "docker compose up --no-build -d"
